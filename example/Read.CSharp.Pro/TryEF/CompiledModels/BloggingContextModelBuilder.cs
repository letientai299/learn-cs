// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Example.TryEF.CompiledModels
{
    public partial class BloggingContextModel
    {
        partial void Initialize()
        {
            var blog = BlogEntityType.Create(this);
            var post = PostEntityType.Create(this);

            PostEntityType.CreateForeignKey1(post, blog);

            BlogEntityType.CreateAnnotations(blog);
            PostEntityType.CreateAnnotations(post);

            AddAnnotation("ProductVersion", "8.0.8");
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var blog = FindEntityType("Example.TryEF.Blog")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            blog.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var exampleTryEFBlogTableBase = new TableBase("Example.TryEF.Blog", null, relationalModel);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", exampleTryEFBlogTableBase);
            exampleTryEFBlogTableBase.Columns.Add("Id", idColumnBase);
            var urlColumnBase = new ColumnBase<ColumnMappingBase>("Url", "TEXT", exampleTryEFBlogTableBase);
            exampleTryEFBlogTableBase.Columns.Add("Url", urlColumnBase);
            relationalModel.DefaultTables.Add("Example.TryEF.Blog", exampleTryEFBlogTableBase);
            var exampleTryEFBlogMappingBase = new TableMappingBase<ColumnMappingBase>(blog, exampleTryEFBlogTableBase, true);
            exampleTryEFBlogTableBase.AddTypeMapping(exampleTryEFBlogMappingBase, false);
            defaultTableMappings.Add(exampleTryEFBlogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, blog.FindProperty("Id")!, exampleTryEFBlogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)urlColumnBase, blog.FindProperty("Url")!, exampleTryEFBlogMappingBase);

            var tableMappings = new List<TableMapping>();
            blog.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var blogsTable = new Table("Blogs", null, relationalModel);
            var idColumn = new Column("Id", "INTEGER", blogsTable);
            blogsTable.Columns.Add("Id", idColumn);
            var urlColumn = new Column("Url", "TEXT", blogsTable);
            blogsTable.Columns.Add("Url", urlColumn);
            var pK_Blogs = new UniqueConstraint("PK_Blogs", blogsTable, new[] { idColumn });
            blogsTable.PrimaryKey = pK_Blogs;
            var pK_BlogsUc = RelationalModel.GetKey(this,
                "Example.TryEF.Blog",
                new[] { "Id" });
            pK_Blogs.MappedKeys.Add(pK_BlogsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_BlogsUc).Add(pK_Blogs);
            blogsTable.UniqueConstraints.Add("PK_Blogs", pK_Blogs);
            relationalModel.Tables.Add(("Blogs", null), blogsTable);
            var blogsTableMapping = new TableMapping(blog, blogsTable, true);
            blogsTable.AddTypeMapping(blogsTableMapping, false);
            tableMappings.Add(blogsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, blog.FindProperty("Id")!, blogsTableMapping);
            RelationalModel.CreateColumnMapping(urlColumn, blog.FindProperty("Url")!, blogsTableMapping);

            var post = FindEntityType("Example.TryEF.Post")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            post.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var exampleTryEFPostTableBase = new TableBase("Example.TryEF.Post", null, relationalModel);
            var blogIdColumnBase = new ColumnBase<ColumnMappingBase>("BlogId", "INTEGER", exampleTryEFPostTableBase);
            exampleTryEFPostTableBase.Columns.Add("BlogId", blogIdColumnBase);
            var contentColumnBase = new ColumnBase<ColumnMappingBase>("Content", "TEXT", exampleTryEFPostTableBase);
            exampleTryEFPostTableBase.Columns.Add("Content", contentColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", exampleTryEFPostTableBase);
            exampleTryEFPostTableBase.Columns.Add("Id", idColumnBase0);
            var titleColumnBase = new ColumnBase<ColumnMappingBase>("Title", "TEXT", exampleTryEFPostTableBase);
            exampleTryEFPostTableBase.Columns.Add("Title", titleColumnBase);
            relationalModel.DefaultTables.Add("Example.TryEF.Post", exampleTryEFPostTableBase);
            var exampleTryEFPostMappingBase = new TableMappingBase<ColumnMappingBase>(post, exampleTryEFPostTableBase, true);
            exampleTryEFPostTableBase.AddTypeMapping(exampleTryEFPostMappingBase, false);
            defaultTableMappings0.Add(exampleTryEFPostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, post.FindProperty("Id")!, exampleTryEFPostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)blogIdColumnBase, post.FindProperty("BlogId")!, exampleTryEFPostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)contentColumnBase, post.FindProperty("Content")!, exampleTryEFPostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase, post.FindProperty("Title")!, exampleTryEFPostMappingBase);

            var tableMappings0 = new List<TableMapping>();
            post.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var postsTable = new Table("Posts", null, relationalModel);
            var idColumn0 = new Column("Id", "INTEGER", postsTable);
            postsTable.Columns.Add("Id", idColumn0);
            var blogIdColumn = new Column("BlogId", "INTEGER", postsTable);
            postsTable.Columns.Add("BlogId", blogIdColumn);
            var contentColumn = new Column("Content", "TEXT", postsTable);
            postsTable.Columns.Add("Content", contentColumn);
            var titleColumn = new Column("Title", "TEXT", postsTable);
            postsTable.Columns.Add("Title", titleColumn);
            var pK_Posts = new UniqueConstraint("PK_Posts", postsTable, new[] { idColumn0 });
            postsTable.PrimaryKey = pK_Posts;
            var pK_PostsUc = RelationalModel.GetKey(this,
                "Example.TryEF.Post",
                new[] { "Id" });
            pK_Posts.MappedKeys.Add(pK_PostsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PostsUc).Add(pK_Posts);
            postsTable.UniqueConstraints.Add("PK_Posts", pK_Posts);
            var iX_Posts_BlogId = new TableIndex(
            "IX_Posts_BlogId", postsTable, new[] { blogIdColumn }, false);
            var iX_Posts_BlogIdIx = RelationalModel.GetIndex(this,
                "Example.TryEF.Post",
                new[] { "BlogId" });
            iX_Posts_BlogId.MappedIndexes.Add(iX_Posts_BlogIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Posts_BlogIdIx).Add(iX_Posts_BlogId);
            postsTable.Indexes.Add("IX_Posts_BlogId", iX_Posts_BlogId);
            relationalModel.Tables.Add(("Posts", null), postsTable);
            var postsTableMapping = new TableMapping(post, postsTable, true);
            postsTable.AddTypeMapping(postsTableMapping, false);
            tableMappings0.Add(postsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, post.FindProperty("Id")!, postsTableMapping);
            RelationalModel.CreateColumnMapping(blogIdColumn, post.FindProperty("BlogId")!, postsTableMapping);
            RelationalModel.CreateColumnMapping(contentColumn, post.FindProperty("Content")!, postsTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn, post.FindProperty("Title")!, postsTableMapping);
            var fK_Posts_Blogs_BlogId = new ForeignKeyConstraint(
                "FK_Posts_Blogs_BlogId", postsTable, blogsTable,
                new[] { blogIdColumn },
                blogsTable.FindUniqueConstraint("PK_Blogs")!, ReferentialAction.Cascade);
            var fK_Posts_Blogs_BlogIdFk = RelationalModel.GetForeignKey(this,
                "Example.TryEF.Post",
                new[] { "BlogId" },
                "Example.TryEF.Blog",
                new[] { "Id" });
            fK_Posts_Blogs_BlogId.MappedForeignKeys.Add(fK_Posts_Blogs_BlogIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Posts_Blogs_BlogIdFk).Add(fK_Posts_Blogs_BlogId);
            postsTable.ForeignKeyConstraints.Add(fK_Posts_Blogs_BlogId);
            blogsTable.ReferencingForeignKeyConstraints.Add(fK_Posts_Blogs_BlogId);
            return relationalModel.MakeReadOnly();
        }
    }
}
